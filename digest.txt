Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    ```
    ```bash
    npm install
    ```
    ```bash
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with NPM
Start the server using Node.js:
```bash
node dist/index.js
```

For sse transport:
```bash
node dist/sse.js
```

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    ```
    ```bash
    npm install
    ```
    ```bash
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with NPM
Start the server using Node.js:
```bash
node dist/index.js
```

For sse transport:
```bash
node dist/sse.js
```

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    ```
    ```bash
    npm install
    ```
    ```bash
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    npm install
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    npm install
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

# Must be entire project because `prepare` script is run during `npm install` and requires all files.
COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    npm install
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section. **It's always better to have secrets like API keys as environment variables.**
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **You can also leverage your shell's environment variables directly, which is a more secure practice:**
   ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY=$TAVILY_API_KEY -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```
   **Note:** The second command demonstrates the recommended approach of using `-e TAVILY_API_KEY=$TAVILY_API_KEY` to pass the value of your `TAVILY_API_KEY` environment variable into the Docker container. This keeps your API key out of your command history, and it is generally preferred over hardcoding secrets in commands.


3. **Using docker compose**

   Run:

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ digest.txt
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

# Must be entire project because `prepare` script is run during `npm install` and requires all files.
COPY . /app/
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/apappascs/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    npm install
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section.
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest .`

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```

3. **Using docker compose**

     ```bash
     docker compose up -d
     ```

   To stop the server:

    ```bash
    docker compose down
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /digest.txt
================================================
Directory structure:
â””â”€â”€ /./
    â”œâ”€â”€ LICENSE
    â”œâ”€â”€ Dockerfile
    â”œâ”€â”€ README.md
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â”œâ”€â”€ docker-compose.yml
    â”œâ”€â”€ .env.example
    â””â”€â”€ src/
        â”œâ”€â”€ sse.ts
        â”œâ”€â”€ index.ts
        â””â”€â”€ tavily.ts

================================================
File: /LICENSE
================================================
MIT License Copyright (c) 2025 Alexandros Pappas

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
(including the next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /Dockerfile
================================================
FROM node:22.12-alpine AS builder

# Must be entire project because `prepare` script is run during `npm install` and requires all files.
COPY src /app
COPY tsconfig.json /tsconfig.json

WORKDIR /app

RUN --mount=type=cache,target=/root/.npm npm install

FROM node:22-alpine AS release

WORKDIR /app

COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

ENV NODE_ENV=production

RUN npm ci --ignore-scripts --omit-dev

# Expose the port for SSE
EXPOSE 3001

# Allow running either stdio or sse server based on an environment variable
CMD if [ "$TRANSPORT" = "sse" ]; then \
        node dist/sse.js; \
    else \
        node dist/index.js; \
    fi

================================================
File: /README.md
================================================
# Tavily Search MCP Server

An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.

## Features

-   **Web Search:** Perform web searches optimized for LLMs, with control over search depth, topic, and time range.
-   **Content Extraction:** Extracts the most relevant content from search results, optimizing for quality and size.
-   **Optional Features:** Include images, image descriptions, short LLM-generated answers, and raw HTML content.
-   **Domain Filtering:** Include or exclude specific domains in search results.

## Tools

-   **tavily_search**
    -   Execute web searches using the Tavily Search API.
    -   Inputs:
        -   `query` (string, required): The search query.
        -   `search_depth` (string, optional): "basic" or "advanced" (default: "basic").
        -   `topic` (string, optional): "general" or "news" (default: "general").
        -   `days` (number, optional): Number of days back for news search (default: 3).
        -   `time_range` (string, optional): Time range filter ("day", "week", "month", "year" or "d", "w", "m", "y").
        -   `max_results` (number, optional): Maximum number of results (default: 5).
        -   `include_images` (boolean, optional): Include related images (default: false).
        -   `include_image_descriptions` (boolean, optional): Include descriptions for images (default: false).
        -   `include_answer` (boolean, optional): Include a short LLM-generated answer (default: false).
        -   `include_raw_content` (boolean, optional): Include raw HTML content (default: false).
        -   `include_domains` (string[], optional): Domains to include.
        -   `exclude_domains` (string[], optional): Domains to exclude.

## Setup Guide ðŸš€

### 1. Prerequisites

-   [Claude Desktop](https://claude.ai/desktop) installed on your computer.
-   A Tavily API key:
    a. Sign up for a [Tavily API account](https://tavily.com/).
    b. Choose a plan (Free tier available).
    c. Generate your API key from the Tavily dashboard.

### 2. Installation

1. Clone this repository somewhere on your computer:

    ```bash
    git clone https://github.com/modelcontextprotocol/tavily-search-mcp-server.git 
    ```

2. Install dependencies & build the project:

    ```bash
    cd tavily-search-mcp-server
    npm install
    npm run build
    ```

### 3. Integration with Claude Desktop

1. Open your Claude Desktop configuration file:

    ```
    # On Mac:
    ~/Library/Application\ Support/Claude/claude_desktop_config.json

    # On Windows:
    %APPDATA%\Claude\claude_desktop_config.json
    ```

2. Add **one** of the following to the `mcpServers` object in your config, depending on whether you want to run the server using `npm` or `docker`:

   **Option A: Using NPM (stdio transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/index.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

   **Option B: Using NPM (SSE transport)**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "node",
                "args": [
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server/dist/sse.js"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                },
                "port": 3001
            }
        }
    }
    ```

   **Option C: Using Docker**

    ```json
    {
        "mcpServers": {
            "tavily-search-server": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "TAVILY_API_KEY",
                    "-v",
                    "/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server:/app",
                    "tavily-search-mcp-server"
                ],
                "env": {
                    "TAVILY_API_KEY": "your_api_key_here"
                }
            }
        }
    }
    ```

3. Important Steps:

    -   Replace `/Users/<username>/<FULL_PATH...>/tavily-search-mcp-server` with the actual full path to where you cloned the repository.
    -   Add your Tavily API key in the `env` section.
    -   Make sure to use forward slashes (`/`) in the path, even on Windows.
    -   If you are using docker make sure you build the image first using `docker build -t tavily-search-mcp-server:latest -f src/tavily-search/Dockerfile .` (assuming the root of your project is the parent of the `src` folder)

4. Restart Claude Desktop for the changes to take effect.

## Environment Setup (for npm)

1. Copy `.env.example` to `.env`:

    ```bash
    cp .env.example .env
    ```

2. Update the `.env` file with your actual Tavily API key:

    ```env
    TAVILY_API_KEY=your_api_key_here
    ```

   Note: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.

## Running with Docker

1. Build the Docker image (if you haven't already):

    ```bash
    docker build -t tavily-search-mcp-server:latest -f src/tavily-search/Dockerfile .
    ```

2. Run the Docker container with:

   **For stdio transport:**

    ```bash
    docker run -it --rm -e TAVILY_API_KEY="your_api_key_here" tavily-search-mcp-server:latest
    ```

   **For sse transport:**

    ```bash
    docker run -it --rm -p 3001:3001 -e TAVILY_API_KEY="your_api_key_here" -e TRANSPORT="sse" tavily-search-mcp-server:latest
    ```

## License

This MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.

================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-sse} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-sse} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-sse} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "keywords": [
    "tavily",
    "search",
    "mcp",
    "model-context-protocol",
    "llm",
    "claude"
  ],
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-sse} # Default to sse if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "keywords": [
    "tavily",
    "search",
    "mcp",
    "model-context-protocol",
    "llm",
    "claude"
  ],
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-sse} # Default to sse if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "keywords": [
    "tavily",
    "search",
    "mcp",
    "model-context-protocol",
    "llm",
    "claude"
  ],
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-stdio} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "keywords": [
    "tavily",
    "search",
    "mcp",
    "model-context-protocol",
    "llm",
    "claude"
  ],
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-stdio} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        process.exit(0);
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}



================================================
File: /package.json
================================================
{
  "name": "tavily-search-mcp-server",
  "version": "0.1.0",
  "description": "MCP server for Tavily Search API integration",
  "license": "MIT",
  "author": "Alexandros Pappas",
  "keywords": [
    "tavily",
    "search",
    "mcp",
    "model-context-protocol",
    "llm",
    "claude"
  ],
  "type": "module",
  "bin": {
    "mcp-server-tavily-search": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "start": "node dist/index.js",
    "start:sse": "node dist/sse.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "express": "^4.21.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22",
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}

================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "nodenext",
    "outDir": "./dist",
    "rootDir": "./src",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "strict": true
  },
  "include": [
    "./src/**/*.ts"
  ]
}

================================================
File: /docker-compose.yml
================================================
version: '3.8'

services:
  tavily-search-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: tavily-search-mcp-server:latest
    container_name: tavily-search-mcp-server
    ports:
      - "3001:3001"
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TRANSPORT=${TRANSPORT:-stdio} # Default to stdio if not set
    volumes:
      - ./src:/app/src
    restart: unless-stopped

================================================
File: /.env.example
================================================
TAVILY_API_KEY=your_api_key_here

================================================
File: /src/sse.ts
================================================
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import express from "express";
import { createServer } from "./tavily.js";

const app = express();

const { server } = createServer();

let transport: SSEServerTransport;

app.get("/sse", async (req, res) => {
    console.log("Received connection");
    transport = new SSEServerTransport("/message", res);
    await server.connect(transport);

    server.onclose = async () => {
        await server.close();
        console.log("Client disconnected");
    };
});

app.post("/message", async (req, res) => {
    console.log("Received message");
    await transport.handlePostMessage(req, res);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

================================================
File: /src/index.ts
================================================
#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createServer } from "./tavily.js";

async function main() {
    const transport = new StdioServerTransport();
    const { server } = createServer();

    await server.connect(transport);

    process.on("SIGINT", async () => {
        await server.close();
        process.exit(0);
    });
}

main().catch((error) => {
    console.error("Server error:", error);
    process.exit(1);
});

================================================
File: /src/tavily.ts
================================================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";

const TAVILY_SEARCH_TOOL: Tool = {
    name: "tavily_search",
    description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. " +
        "Use this for broad information gathering, recent events, or when you need diverse web sources. " +
        "Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
    inputSchema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "The search query.",
            },
            search_depth: {
                type: "string",
                description: 'The depth of the search. It can be "basic" or "advanced".',
                enum: ["basic", "advanced"],
                default: "basic",
            },
            topic: {
                type: "string",
                description: 'The category of the search. Currently: only "general" and "news" are supported.',
                enum: ["general", "news"],
                default: "general",
            },
            days: {
                type: "number",
                description: "The number of days back from the current date to include in the search results (for news topic).",
                default: 3
            },
            time_range: {
                type: "string",
                description: 'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
                enum: ["day", "week", "month", "year", "d", "w", "m", "y"],
            },
            max_results: {
                type: "number",
                description: "The maximum number of search results to return.",
                default: 5,
            },
            include_images: {
                type: "boolean",
                description: "Include a list of query-related images in the response.",
                default: false,
            },
            include_image_descriptions: {
                type: "boolean",
                description: "When include_images is set to True, this option adds descriptive text for each image.",
                default: false,
            },
            include_answer: {
                type: "boolean",
                description: "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
                default: false,
            },
            include_raw_content: {
                type: "boolean",
                description: "Include the cleaned and parsed HTML content of each search result.",
                default: false,
            },
            include_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically include in the search results.",
                default: [],
            },
            exclude_domains: {
                type: "array",
                items: {
                    type: "string",
                },
                description: "A list of domains to specifically exclude from the search results.",
                default: [],
            },
        },
        required: ["query"],
    },
};

export const createServer = () => {
// Server implementation
    const server = new Server(
        {
            name: "example-servers/tavily-search",
            version: "0.1.0",
        },
        {
            capabilities: {
                tools: {},
            },
        },
    );

// Check for API key
    const TAVILY_API_KEY = process.env.TAVILY_API_KEY!;
    if (!TAVILY_API_KEY) {
        console.error("Error: TAVILY_API_KEY environment variable is required");
        process.exit(1);
    }

    interface TavilySearchArgs {
        query: string;
        search_depth?: "basic" | "advanced";
        topic?: "general" | "news";
        days?: number;
        time_range?: "day" | "week" | "month" | "year" | "d" | "w" | "m" | "y";
        max_results?: number;
        include_images?: boolean;
        include_image_descriptions?: boolean;
        include_answer?: boolean;
        include_raw_content?: boolean;
        include_domains?: string[];
        exclude_domains?: string[];
    }

    function isTavilySearchArgs(args: unknown): args is TavilySearchArgs {
        return (
            typeof args === "object" &&
            args !== null &&
            "query" in args &&
            typeof (args as { query: string }).query === "string"
        );
    }

    async function performTavilySearch(args: TavilySearchArgs) {
        const url = "https://api.tavily.com/search";

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TAVILY_API_KEY}`,
            },
            body: JSON.stringify({
                ...args
            }),
        });

        if (!response.ok) {
            throw new Error(`Tavily API error: ${response.status} ${response.statusText}\n${await response.text()}`);
        }

        const data = await response.json();
        return JSON.stringify(data, null, 2);
    }

// Tool handlers
    server.setRequestHandler(ListToolsRequestSchema, async () => ({
        tools: [TAVILY_SEARCH_TOOL],
    }));

    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        try {
            const { name, arguments: args } = request.params;

            if (!args) {
                throw new Error("No arguments provided");
            }

            switch (name) {
                case "tavily_search": {
                    if (!isTavilySearchArgs(args)) {
                        throw new Error("Invalid arguments for tavily_search");
                    }
                    const results = await performTavilySearch(args);
                    return {
                        content: [{type: "text", text: results}],
                        isError: false,
                    };
                }
                default:
                    return {
                        content: [{type: "text", text: `Unknown tool: ${name}`}],
                        isError: true,
                    };
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: `Error: ${error instanceof Error ? error.message : String(error)}`,
                    },
                ],
                isError: true,
            };
        }
    });

    return {server};
}

